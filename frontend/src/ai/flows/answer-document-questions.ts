'use server';

/**
 * @fileOverview This file defines a Genkit flow for answering questions about a legal document.
 *
 * It takes a document and a question as input, and returns an answer generated by the AI, with references to relevant clauses.
 *
 * @exported answerDocumentQuestions - The main function to answer questions about a document.
 * @exported AnswerDocumentQuestionsInput - The input type for the answerDocumentQuestions function.
 * @exported AnswerDocumentQuestionsOutput - The output type for the answerDocumentQuestions function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnswerDocumentQuestionsInputSchema = z.object({
  documentText: z
    .string()
    .describe('The complete text content of the legal document.'),
  question: z.string().describe('The question to be answered about the document.'),
});
export type AnswerDocumentQuestionsInput = z.infer<
  typeof AnswerDocumentQuestionsInputSchema
>;

const AnswerDocumentQuestionsOutputSchema = z.object({
  answer: z.string().describe('The AI-generated answer to the question.'),
  references: z
    .array(z.string())
    .describe('The list of relevant clauses referenced in the answer.'),
});
export type AnswerDocumentQuestionsOutput = z.infer<
  typeof AnswerDocumentQuestionsOutputSchema
>;

export async function answerDocumentQuestions(
  input: AnswerDocumentQuestionsInput
): Promise<AnswerDocumentQuestionsOutput> {
  return answerDocumentQuestionsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'answerDocumentQuestionsPrompt',
  input: {schema: AnswerDocumentQuestionsInputSchema},
  output: {schema: AnswerDocumentQuestionsOutputSchema},
  prompt: `You are an AI assistant specialized in answering questions about legal documents.

  Given the following legal document and a question, provide a concise and informative answer.
  If the answer is based on specific clauses, cite those clauses in the answer.

  Document:
  {{documentText}}

  Question:
  {{question}}

  Answer:`,
});

const answerDocumentQuestionsFlow = ai.defineFlow(
  {
    name: 'answerDocumentQuestionsFlow',
    inputSchema: AnswerDocumentQuestionsInputSchema,
    outputSchema: AnswerDocumentQuestionsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
